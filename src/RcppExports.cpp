// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// eigen_version
void eigen_version();
RcppExport SEXP _RcppStatGen_eigen_version() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    eigen_version();
    return R_NilValue;
END_RCPP
}
// eigen_scale
Eigen::MatrixXd eigen_scale(const Eigen::MatrixXd& X0, int verbose);
RcppExport SEXP _RcppStatGen_eigen_scale(SEXP X0SEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X0(X0SEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(eigen_scale(X0, verbose));
    return rcpp_result_gen;
END_RCPP
}
// eigen_scale_inplace
void eigen_scale_inplace(Eigen::Map<Eigen::MatrixXd> X);
RcppExport SEXP _RcppStatGen_eigen_scale_inplace(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type X(XSEXP);
    eigen_scale_inplace(X);
    return R_NilValue;
END_RCPP
}
// eigen_scale_naive
Eigen::MatrixXd eigen_scale_naive(const Eigen::MatrixXd& X0);
RcppExport SEXP _RcppStatGen_eigen_scale_naive(SEXP X0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X0(X0SEXP);
    rcpp_result_gen = Rcpp::wrap(eigen_scale_naive(X0));
    return rcpp_result_gen;
END_RCPP
}
// eigen_scale_template
Eigen::MatrixXd eigen_scale_template(SEXP X, int verbose);
RcppExport SEXP _RcppStatGen_eigen_scale_template(SEXP XSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(eigen_scale_template(X, verbose));
    return rcpp_result_gen;
END_RCPP
}
// eigen_qr_keep
Eigen::ArrayXi eigen_qr_keep(const Eigen::MatrixXd& X, double tol, int verbose);
RcppExport SEXP _RcppStatGen_eigen_qr_keep(SEXP XSEXP, SEXP tolSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(eigen_qr_keep(X, tol, verbose));
    return rcpp_result_gen;
END_RCPP
}
// eigen_qri_keep
Eigen::ArrayXi eigen_qri_keep(const Eigen::MatrixXd& X0, Eigen::ArrayXi cols_selected, double tol, int verbose);
RcppExport SEXP _RcppStatGen_eigen_qri_keep(SEXP X0SEXP, SEXP cols_selectedSEXP, SEXP tolSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X0(X0SEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXi >::type cols_selected(cols_selectedSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(eigen_qri_keep(X0, cols_selected, tol, verbose));
    return rcpp_result_gen;
END_RCPP
}
// eigen_qrp_keep
Eigen::ArrayXi eigen_qrp_keep(const Eigen::MatrixXd& X, Eigen::ArrayXi cols_selected, double tol, int verbose);
RcppExport SEXP _RcppStatGen_eigen_qrp_keep(SEXP XSEXP, SEXP cols_selectedSEXP, SEXP tolSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXi >::type cols_selected(cols_selectedSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(eigen_qrp_keep(X, cols_selected, tol, verbose));
    return rcpp_result_gen;
END_RCPP
}
// eigen_print_sum
void eigen_print_sum(SEXP X);
RcppExport SEXP _RcppStatGen_eigen_print_sum(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type X(XSEXP);
    eigen_print_sum(X);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RcppStatGen_eigen_version", (DL_FUNC) &_RcppStatGen_eigen_version, 0},
    {"_RcppStatGen_eigen_scale", (DL_FUNC) &_RcppStatGen_eigen_scale, 2},
    {"_RcppStatGen_eigen_scale_inplace", (DL_FUNC) &_RcppStatGen_eigen_scale_inplace, 1},
    {"_RcppStatGen_eigen_scale_naive", (DL_FUNC) &_RcppStatGen_eigen_scale_naive, 1},
    {"_RcppStatGen_eigen_scale_template", (DL_FUNC) &_RcppStatGen_eigen_scale_template, 2},
    {"_RcppStatGen_eigen_qr_keep", (DL_FUNC) &_RcppStatGen_eigen_qr_keep, 3},
    {"_RcppStatGen_eigen_qri_keep", (DL_FUNC) &_RcppStatGen_eigen_qri_keep, 4},
    {"_RcppStatGen_eigen_qrp_keep", (DL_FUNC) &_RcppStatGen_eigen_qrp_keep, 4},
    {"_RcppStatGen_eigen_print_sum", (DL_FUNC) &_RcppStatGen_eigen_print_sum, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_RcppStatGen(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
